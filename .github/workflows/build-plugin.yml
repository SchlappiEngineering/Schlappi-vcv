# Adapted from https://github.com/ArdenButterfield/wildergarden-vcv/blob/main/.github/workflows/build-plugin.yml
# licensed under GPL v3

name: Build VCV Rack Plugin

on: [push, pull_request]

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

jobs:
  build-lin-x64:
    name: lin-x64
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4ms/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          curl -sL https://github.com/Kitware/CMake/releases/download/v3.24.3/cmake-3.24.3-linux-x86_64.sh -o cmakeinstall.sh
          chmod +x cmakeinstall.sh
          ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir
          rm cmakeinstall.sh
          make plugin-build-lin-x64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: lin-x64

  build-win-x64:
    name: win-x64
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4ms/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          curl -sL https://github.com/Kitware/CMake/releases/download/v3.24.3/cmake-3.24.3-linux-x86_64.sh -o cmakeinstall.sh
          chmod +x cmakeinstall.sh
          ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir
          rm cmakeinstall.sh
          make plugin-build-win-x64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: win-x64

  build-mac-x64:
    name: mac_x64
    runs-on: macos-13
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-x64.zip
          unzip Rack-SDK.zip
      - name: Build plugin
        run: |
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=x86_64-apple-darwin
          make dep
          make dist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-x64

  build-mac-arm64:
    name: mac_arm64
    runs-on: macos-13
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-arm64.zip
          unzip Rack-SDK.zip
      - name: Build plugin
        run: |
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=arm64-apple-darwin
          make dep
          make dist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-arm64

  build-metamodule:
    strategy:
      matrix:
        gcc: [ '12.3.Rel1' ]  # can add other versions if needed
    name: "Build metamodule firmware on linux"
    runs-on: ubuntu-24.04
    steps:
      - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: ${{ matrix.gcc }}

      - name: Install cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.26.x'

      - name: Git setup
        run: git config --global --add safe.directory '*'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          sudo apt-get install inkscape

      - name: Set Release Version
        if: startsWith(github.ref, 'refs/tags/')
        uses: FranzDiebold/github-env-vars-action@v2

      - name: Copy assets to folder
        run: |
          python3 metamodule-plugin-sdk/scripts/SvgToPng.py --input res --output metamodule/assets --white --height=240
          python3 metamodule-plugin-sdk/scripts/SvgToPng.py --input res/widgets --output metamodule/assets/widgets --white --height=240

      - name: Build
        run: |
          cd metamodule
          cmake -B build -G Ninja -DMETAMODULE_SDK_DIR=../metamodule-plugin-sdk -DINSTALL_DIR=${{ github.workspace }}/metamodule-plugins
          cmake --build build
      #          cd ${{ github.workspace }}/metamodule-plugins/
      #          if [ "${{ inputs.plugin }}" == "./" ]; then for f in *.mmplugin; do mv $f ${f%.mmplugin}-${{ env.CI_REF_NAME }}.mmplugin; done; else for f in *.mmplugin; do mv $f ${{ env.CI_REF_NAME }}.mmplugin; done; fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/metamodule-plugins/schlappiengineering.mmplugin
          name: metamodule-linux-build
#
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          name: "Release: ${{ env.CI_REF_NAME }}"
#          files: |
#            metamodule-plugins/*.mmplugin